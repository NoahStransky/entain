syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}
}

/* Requests/Responses */

// Race status enum.
enum RaceStatus {
  OPEN = 0;
  CLOSED = 1;
}

message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  optional bool visible = 2;
  // The order by clause, which needs to follow sql order by syntax,
  // E.g. "id desc, name asc"
  string order_by = 3;
}

/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Status is derived based on AdvertisedStartTime and the current time.
  // When AdvertisedStartTime is in the past should be "CLOSED", otherwise be "OPEN".
  RaceStatus status = 7;
}

